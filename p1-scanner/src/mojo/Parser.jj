/* Copyright (C) 1997-2023, Antony L Hosking.
 * All rights reserved.  */

options {
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    STATIC = false;
    JDK_VERSION = "1.9";
}
PARSER_BEGIN(Parser)
public class Parser {}
PARSER_END(Parser)

/**************************************************
 * The lexical spec starts here                   *
 **************************************************/

TOKEN_MGR_DECLS : {
    static int comment;
    int pragma;
    public static void main(String[] args) {
    SimpleCharStream stream = new SimpleCharStream(System.in);
    ParserTokenManager scanner = new ParserTokenManager(stream);
    while (true) {
        try {
            Token token = scanner.getNextToken();
            for (Token t = token.specialToken; t != null; t = t.specialToken) {
                System.out.println(tokenImage[t.kind] + " " + t);
            }
            if (token.kind == EOF) {
                if (comment > 0) {
                    throw new TokenMgrError();
                }
                break;
            }
            System.out.println(tokenImage[token.kind] + " " + token);
        } catch (TokenMgrError e) {
            System.out.println("!ERROR");
            System.err.println(e.getMessage());
            System.exit(-1);
            }
        }
    }
}

/* WHITE SPACE */
SKIP : { " " | "\t" | "\n" | "\r" | "\13" | "\f" }

/* KEYWORDS */
TOKEN : {
    "break" | "class" | "const" | "else" | "extends" | "for" | "if" | "loop" | "method" |
            "override" | "proc" | "return" | "struct" | "type" | "until" | "val" | "var" | "while"
}

/* OPERATORS */
TOKEN : {
    "||" | "<"  | "<=" | "+" | "-" | "{" | "}" | ";" | ","
    | "&&" | ">"  | ">=" | "*" | "/" | "(" | ")" | ":" | "."
    | "==" | "!"  | "!=" | ".."| "%" | "[" | "]" | ":="| "=" | "^"
}

SKIP : {
    "/*" { comment = 1; } : COMMENT
}

<COMMENT> SKIP : {
    "/*" { comment += 1; }
    | "*/" {
        comment -= 1;
        SwitchTo ( comment == 0 ? DEFAULT : COMMENT ) ;
    }
    | < ~[] >
}

TOKEN: {
    <ID: <LETTER> (<LETTER> | <DIGIT> | "_")*>
    | <#LETTER: ["a"-"z","A"-"Z"]>
}

TOKEN: {
    // Numbers
    <NUMBER: (<DIGIT>)+ ("_" <HEX_DIGIT> (<HEX_DIGIT>)*)?>
    | <#DIGIT: ["0"-"9"]>
    | <#HEX_DIGIT: <DIGIT> | ["a"-"f","A"-"F"]>
    | <#OCTAL_DIGIT: ["0"-"7"]>
}

TOKEN: {
    <CHAR: "'" (<PRINTING_CHAR> | <ESCAPE> | "\"") "'">
    | <TEXT: "\"" (<PRINTING_CHAR> | <ESCAPE> | "\"")* "\"" >
    | <#ESCAPE: "\\" ["a","b","f","n","r","t","v","\\","'","\""]
                | "\\" ("0" | "1" | "2" | "3") <OCTAL_DIGIT> <OCTAL_DIGIT>
                | "\\x" <HEX_DIGIT> <HEX_DIGIT>
                | "\\u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>
                | "\\U" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>>
    | <#PRINTING_CHAR: <LETTER> | <DIGIT> | <OTHER_CHAR>>
    | <#OTHER_CHAR: " " | "!" | "#" | "$" | "%" | "&" | "(" | ")"
                    | "*" | "+" | "," | "-" | "." | "/" | ":" | ";"
                    | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^"
                    | "_" | "`" | "{" | "|" | "}" | "~">
}